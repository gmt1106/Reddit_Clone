import React from "react";
import { Formik, Form } from "formik";
import { Box, Button } from "@chakra-ui/react";
import { Wrapper } from "../components/Wrapper";
import { InputField } from "../components/InputField";
import { useRegisterMutation } from "../generated/graphql";

interface registerProps {}

// // `` is used for template literals
// // Template literals are literals delimited with backtick (`) characters, allowing for multi-line strings,
// // for string interpolation with embedded expressions, and for special constructs called tagged templates.
// const REGISTER_MUT = `mutation Register($username: String!, $password:String!){
//   register(registerInput: {username: $username, password: $password}) {
//     errors {
//       field
//       message
//     }
//     user {
//       id
//       username
//     }
//   }
// }`;
export const Register: React.FC<registerProps> = ({}) => {
  // // urql hook
  // // first return value is information about what is going on with the mutation ex) data, fetching, error, ...
  // // second return value is the mutation function that you can use in the code
  // const [, register] = useMutation(REGISTER_MUT);

  // Now use the custum hook instead of urql hook
  // Using this custum hook that is auto generated by GraphQL Code Generator,
  // all the variables in reponses from mutaiton and query have distinct type.
  const [, register] = useRegisterMutation();
  return (
    <Wrapper variant="small">
      <Formik
        initialValues={{ username: "", password: "" }}
        onSubmit={async (values, { setErrors }) => {
          // values' keys line up exactly with the mutation function variable ex) username, password
          // so you don't have to change anything
          // otherwise, need to pass {username: values.username, password: values.password}
          const response = await register(values);
          // handle error
          if (response.data?.register.errors) {
            // from formik that set error for each input
            setErrors({
              username: "error", // this is the error message for username input
            });
          }
        }}
      >
        {({ isSubmitting }) => (
          <Form>
            <InputField
              name="username"
              placeholder="username"
              label="Username"
            />
            <Box mt={4}>
              <InputField
                name="password"
                placeholder="password"
                label="Password"
                type="password"
              />
            </Box>
            <Button
              mt={4}
              type="submit"
              isLoading={isSubmitting}
              colorScheme="teal"
            >
              register
            </Button>
          </Form>
        )}
      </Formik>
    </Wrapper>
  );
};

export default Register;
// In next.js have to exprot default the component.
// If you are only exporting a single class or function, use export default.
// If a moduleâ€™s primary purpose is to house one specific export, then you should consider exporting it as a default export.
// This makes both importing and actually using the import a little easier.
